<section class='mouse-blend-brightness-effect'>
  <canvas></canvas>
  <aside class='over-canvas'></aside>
</section>

<style is:global>
  .tp-dfwv {
    z-index: 50;
    display: none;
  }

  .mouse-blend-brightness-effect {
    width: 100%;
    height: 100vh;
    position: fixed;
  }

  canvas,
  .over-canvas {
    position: absolute;
    width: 100%;
    height: 100%;
  }

  :root {
    --blur: 50px;
    --brightness: 500%;
    --contrast: 100%;
    --grayscale: 0%;
    --invert: 0%;
    --opacity: 100%;
    --saturate: 100%;
    --sepia: 0%;
    --hue-rotate: 0deg;
  }

  .over-canvas {
    z-index: 5;
    background-color: rgba(0, 0, 0, 0.1);
    backdrop-filter: blur(2vmax);
    pointer-events: none;
    filter: blur(var(--blur)) brightness(var(--brightness))
      contrast(var(--contrast)) grayscale(var(--grayscale)) invert(var(--invert))
      opacity(var(--opacity)) saturate(var(--saturate)) sepia(var(--sepia))
      hue-rotate(var(--hue-rotate));
  }
</style>

<script>
  import { Pane } from 'tweakpane';
  const menu = new Pane();
  const html = document.documentElement;

  const PARAMS = {
    blur: 50,
    brightness: 500,
    contrast: 100,
    grayscale: 0,
    invert: 0,
    opacity: 100,
    saturate: 100,
    sepia: 0,
    hueRotate: 0
  };

  menu
    .addBinding(PARAMS, 'blur', { min: 0, max: 50, step: 1 })
    .on('change', e => html.style.setProperty('--blur', `${e.value}px`));

  menu
    .addBinding(PARAMS, 'brightness', { min: 0, max: 500, step: 1 })
    .on('change', e => html.style.setProperty('--brightness', `${e.value}%`));

  menu
    .addBinding(PARAMS, 'contrast', { min: 0, max: 300, step: 1 })
    .on('change', e => html.style.setProperty('--contrast', `${e.value}%`));

  menu
    .addBinding(PARAMS, 'grayscale', { min: 0, max: 100, step: 1 })
    .on('change', e => html.style.setProperty('--grayscale', `${e.value}%`));

  menu
    .addBinding(PARAMS, 'invert', { min: 0, max: 100, step: 1 })
    .on('change', e => html.style.setProperty('--invert', `${e.value}%`));

  menu
    .addBinding(PARAMS, 'opacity', { min: 0, max: 100, step: 1 })
    .on('change', e => html.style.setProperty('--opacity', `${e.value}%`));

  menu
    .addBinding(PARAMS, 'saturate', { min: 0, max: 500, step: 1 })
    .on('change', e => html.style.setProperty('--saturate', `${e.value}%`));

  menu
    .addBinding(PARAMS, 'sepia', { min: 0, max: 100, step: 1 })
    .on('change', e => html.style.setProperty('--sepia', `${e.value}%`));

  menu
    .addBinding(PARAMS, 'hueRotate', { min: 0, max: 360, step: 1 })
    .on('change', e => html.style.setProperty('--hue-rotate', `${e.value}deg`));
</script>

<script>
  const $ = <T extends Element = HTMLElement>(el: string) =>
    document.querySelector<T>(el) as T;
  const $canvas = $<HTMLCanvasElement>('canvas');
  const ctx = $canvas.getContext('2d') as CanvasRenderingContext2D;
  let widthCanvas = ($canvas.width = window.innerWidth);
  let heightCanvas = ($canvas.height = window.innerHeight);
  let mouse: { x?: number; y?: number } = { x: undefined, y: undefined };
  let banderaColor = true;
  let blackColor = 'rgba(0,0,0,0.1)';
  let whiteColor = 'rgba(255,255,255,0.1)';
  let colorDevice = blackColor;

  $canvas.addEventListener('dblclick', e => {
    colorDevice = banderaColor ? whiteColor : blackColor;
    banderaColor = !banderaColor;
  });

  class Particle {
    x: number;
    y: number;
    size: number;
    speed: number;
    angle: number;
    h: number;
    hue: number;
    color: string;
    ttl: number;
    time: number;

    constructor() {
      this.x = mouse.x! + getRandomInt(-30, 30);
      this.y = mouse.y! + getRandomInt(-30, 30);
      this.size = getRandomInt(2, 3);
      this.speed = getRandomInt(2, 3);
      this.angle = getRandomInt(1, 360);
      this.h = this.y / (heightCanvas / 360);
      this.hue = getRandomInt(this.h - 20, this.h - 20);
      this.ttl = 180;
      this.time = 0;
      this.color = `hsla(${this.hue},100%,50%)`;
    }

    draw() {
      ctx.fillStyle = this.color;
      ctx.beginPath();
      ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
      ctx.fill();
      ctx.closePath();
    }

    update() {
      if (this.time <= this.ttl) {
        let progress = 1 - (this.ttl - this.time) / this.time;
        let alpha = progress > 0.7 ? 1 - progress : 1;
        this.color = `hsla(${this.hue},100%,50%, ${alpha})`;

        this.x += Math.cos(this.angle) * this.speed;
        this.y += Math.sin(this.angle) * this.speed;
        this.angle += Math.random() * 0.8 - 0.4;
      }
      this.time++;
    }
  }

  let particles: Particle[] = [];

  function drawCanvas() {
    ctx.fillStyle = colorDevice;
    ctx.fillRect(0, 0, widthCanvas, heightCanvas);
    let particlesStillAlive: Particle[] = [];
    particles.forEach(particle => {
      particle.draw();
      particle.update();
      if (particle.time <= particle.ttl) {
        particlesStillAlive.push(particle);
      }
    });

    particles = particlesStillAlive;
    requestAnimationFrame(drawCanvas);
  }

  function getRandomInt(min: number, max: number) {
    return ~~(Math.random() * (max - min) + min);
  }

  function reset() {
    widthCanvas = $canvas.width = window.innerWidth;
    heightCanvas = $canvas.height = window.innerHeight;
  }

  function mouseMove(event: MouseEvent | TouchEvent) {
    const { clientX, clientY } =
      event instanceof TouchEvent ? event.touches[0] : event;
    mouse.x = clientX;
    mouse.y = clientY;
    const numOfParticles = window.innerWidth <= 1111 ? 2 : 20;
    for (let i = 0; i < numOfParticles; i++) {
      particles.push(new Particle());
    }
  }

  function mouseOut() {
    mouse.x = undefined;
    mouse.y = undefined;
  }

  drawCanvas();
  document.addEventListener('mousemove', mouseMove);
  document.addEventListener('touchmove', mouseMove);
  document.addEventListener('mouseout', mouseOut);
  document.addEventListener('touchend', mouseOut);
  window.addEventListener('resize', reset);
</script>
